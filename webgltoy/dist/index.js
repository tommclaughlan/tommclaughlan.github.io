!function(t){var e={};function r(a){if(e[a])return e[a].exports;var i=e[a]={i:a,l:!1,exports:{}};return t[a].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,a){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(a,i,function(e){return t[e]}.bind(null,i));return a},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);var a=t=>{const e=t.createBuffer(),r=r=>(t.bindBuffer(t.ARRAY_BUFFER,e),t.bufferData(t.ARRAY_BUFFER,r,t.DYNAMIC_DRAW),e);return r.updateData=(r,a)=>(t.bindBuffer(t.ARRAY_BUFFER,e),t.bufferSubData(t.ARRAY_BUFFER,r*Float32Array.BYTES_PER_ELEMENT,a),e),r.loc=()=>e,r};class i{constructor(t){this.gl=t.getContext("webgl"),this.positionBuffer=a(this.gl),this.colorBuffer=a(this.gl),this.scale=8,this.translation=[0,0],this.numElements=0}setUp(t){this.vertexLocation=this.gl.getAttribLocation(t,"aVertexPosition"),this.colorLocation=this.gl.getAttribLocation(t,"aColor"),this.sizeLocation=this.gl.getAttribLocation(t,"aSize"),this.resolutionLocation=this.gl.getUniformLocation(t,"uResolution"),this.scaleLocation=this.gl.getUniformLocation(t,"uScale"),this.translateLocation=this.gl.getUniformLocation(t,"uTranslate"),this.gl.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height),this.gl.enable(this.gl.BLEND),this.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA),this.gl.useProgram(t),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.positionBuffer.loc()),this.gl.vertexAttribPointer(this.vertexLocation,3,this.gl.FLOAT,!1,0,0),this.gl.enableVertexAttribArray(this.vertexLocation),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.colorBuffer.loc()),this.gl.vertexAttribPointer(this.colorLocation,4,this.gl.FLOAT,!1,0,0),this.gl.enableVertexAttribArray(this.colorLocation)}createProgram(t,e){const r=this.loadShader(t,this.gl.VERTEX_SHADER),a=this.loadShader(e,this.gl.FRAGMENT_SHADER),i=this.gl.createProgram();return this.gl.attachShader(i,r),this.gl.attachShader(i,a),this.gl.linkProgram(i),this.gl.getProgramParameter(i,this.gl.LINK_STATUS)?i:(console.log(this.gl.getProgramInfoLog(i)),this.gl.deleteProgram(i),null)}loadShader(t,e){const r=this.gl.createShader(e);return this.gl.shaderSource(r,t),this.gl.compileShader(r),this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS)?r:(console.log(this.gl.getShaderInfoLog(r)),this.gl.deleteShader(r),null)}zoom(t){this.scale*=1+t,this.scale<=.1&&(this.scale=.1)}translate([t,e]){this.translation=[this.translation[0]+t/this.scale,this.translation[1]+e/this.scale]}resizeCanvas(){const t=this.gl.canvas.clientWidth,e=this.gl.canvas.clientHeight;this.gl.canvas.width===t&&this.gl.canvas.height===e||(this.gl.canvas.width=t,this.gl.canvas.height=e),this.gl.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height)}setPoints(t,e){this.positionBuffer(t),this.colorBuffer(e),this.numElements=t.length/3}drawPoints(){this.resizeCanvas(),this.gl.uniform2f(this.resolutionLocation,this.gl.canvas.width,this.gl.canvas.height),this.gl.uniform2fv(this.scaleLocation,[this.scale,this.scale]),this.gl.uniform2fv(this.translateLocation,this.translation),this.gl.drawArrays(this.gl.POINTS,0,this.numElements)}updatePoints(t,e,r,a){this.positionBuffer.updateData(e,t),this.colorBuffer.updateData(a,r)}draw(t){this.resizeCanvas(),this.gl.uniform2f(this.resolutionLocation,this.gl.canvas.width,this.gl.canvas.height),this.gl.drawArrays(this.gl.POINTS,0,t)}}class s{constructor(t,e,r){this.x=t,this.y=e,this.r=r,this.color=[.6,.6,.6,.8]}getPoints(){return[this.x,this.y,this.r]}getColors(){return this.color}setColor(t){this.color=t}move(t,e){this.x+=t,this.y+=e}}const n=async t=>{const e=await fetch(`dist/${t}`);return await e.text()},o=async t=>({header:await n(`${t}/header.glsl`),body:await n(`${t}/body.glsl`)}),h={translateFunction:n("shaders/vertex/functions/translate.glsl"),scaleFunction:n("shaders/vertex/functions/scale.glsl"),clipSpaceFunction:n("shaders/vertex/functions/clipSpace.glsl"),multiColor:o("shaders/vertex/multicolor"),pointShader:o("shaders/vertex/point")},l={multiColor:o("shaders/fragment/multicolor"),circle:o("shaders/fragment/circle")};class d{constructor(){this.vertexShaderHeader="",this.vertexShaderBody="",this.fragShaderHeader="",this.fragShaderBody="",this.vertexShaderHeaders=[],this.vertexShaderBodies=[],this.fragShaderHeaders=[],this.fragShaderBodies=[]}addVertexShader({header:t,body:e}){return this.addVertexShaderHeader(t),this.addVertexShaderBody(e),this}addFragmentShader({header:t,body:e}){return this.addFragmentShaderHeader(t),this.addFragmentShaderBody(e),this}addVertexShaderBody(t){return this.vertexShaderBodies.push(t),this}addVertexShaderHeader(t){return this.vertexShaderHeaders.push(t),this}addFragmentShaderBody(t){return this.fragShaderBodies.push(t),this}addFragmentShaderHeader(t){return this.fragShaderHeaders.push(t),this}build(){return this.vertexShaderHeader=this.vertexShaderHeaders.join(" "),this.vertexShaderBody=this.vertexShaderBodies.join(" "),this.fragShaderHeader=this.fragShaderHeaders.join(" "),this.fragShaderBody=this.fragShaderBodies.join(" "),{vertexShader:`\n        precision mediump float;\n        attribute vec4 aVertexPosition;\n\n        ${this.vertexShaderHeader}\n\n        void main() {\n            vec4 v = aVertexPosition;\n\n            ${this.vertexShaderBody}\n\n            gl_Position = v;\n        }\n        `,fragmentShader:`\n            precision mediump float;\n\n            ${this.fragShaderHeader}\n\n            void main() {\n                vec4 v = vec4(0.0, 0.0, 0.0, 1.0);\n\n                ${this.fragShaderBody}\n\n                gl_FragColor = v;\n            }\n        `}}}!async function(){const t=document.querySelector("#webgl"),e=new d;e.addVertexShaderHeader(await h.translateFunction),e.addVertexShaderHeader(await h.scaleFunction),e.addVertexShaderHeader(await h.clipSpaceFunction),e.addVertexShader(await h.multiColor),e.addVertexShader(await h.pointShader),e.addVertexShaderBody("\n        gl_PointSize = gl_PointSize * 4.0;\n    "),e.addVertexShaderBody("\n        v = vec4(scale(clipSpace(translate(v.xy))), 0, 1);\n    "),e.addFragmentShader(await l.multiColor),e.addFragmentShader(await l.circle),e.addFragmentShaderBody("\n        v.a = length(clamp(gl_PointCoord, 0.3, 1.0));\n    "),e.addFragmentShaderBody("\n        if (length(2.0 * gl_PointCoord - 1.0) * vSize > vSize - 1.0) {\n            v = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ");const r=new i(t),a=e.build(),n=r.createProgram(a.vertexShader,a.fragmentShader);t.addEventListener("wheel",t=>{t.preventDefault(),r.zoom(-t.deltaY/1e3)});let o=!1;t.addEventListener("mousedown",t=>{t.preventDefault(),o=!0}),t.addEventListener("mouseup",t=>{t.preventDefault(),o=!1,c=[]});let c=[];t.addEventListener("mousemove",t=>{if(t.preventDefault(),o){if(c.length>0){let e=[t.offsetX-c[0],c[1]-t.offsetY];r.translate(e)}c=[t.offsetX,t.offsetY]}});const g=[];for(let t=0;t<1e4;t++)g.push(new s(1500*Math.random(),800*Math.random(),5+10*Math.random()));g.forEach((t,e)=>{e%4==0&&t.setColor([Math.random(),Math.random(),Math.random(),.7])}),r.setUp(n);let u=Date.now(),f=0,S=0,m=new Float32Array(3*g.length),v=new Float32Array(4*g.length),p=0,x=0;g.forEach((t,e)=>{t.r+=2*(Math.random()-.5),t.r<1&&(t.r=1),t.r>50&&(t.r=50),t.move(2*(Math.random()-.5),2*(Math.random()-.5)),Math.random()>.99&&t.setColor([Math.random(),Math.random(),Math.random(),.7]);const a=new Float32Array(t.getPoints()),i=new Float32Array(t.getColors());r.updatePoints(a,3*e,i,4*e),m[p++]=a[0],m[p++]=a[1],m[p++]=a[2],v[x++]=i[0],v[x++]=i[1],v[x++]=i[2],v[x++]=i[3]}),r.setPoints(m,v);const y=()=>{A(),r.drawPoints(),requestAnimationFrame(y)},A=()=>{let t=1e3/(Date.now()-u);u=Date.now(),f+=t,25===++S&&(document.querySelector("#fps").innerHTML=`${(f/S).toFixed(2)} FPS`,S=0,f=0)};requestAnimationFrame(y)}()}]);
//# sourceMappingURL=index.js.map